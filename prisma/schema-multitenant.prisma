// Multi-Tenant Cinema Management System Prisma Schema
// This schema supports multiple companies (tenants) with complete data segregation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  CANCELED
  COMPLETED

  @@map("session_status")
}

enum RoomType {
  TWO_D
  THREE_D
  IMAX
  EXTREME
  VIP

  @@map("room_type")
}

enum SaleStatus {
  OPEN
  FINALIZED
  CANCELED
  REFUNDED

  @@map("sale_status")
}

enum EmployeeRole {
  CASHIER
  MANAGER
  ADMIN
  MAINTENANCE
  SECURITY

  @@map("employee_role")
}

enum TimeEntryType {
  CLOCK_IN
  CLOCK_OUT
  BREAK_START
  BREAK_END

  @@map("time_entry_type")
}

enum PaymentMethod {
  CASH
  CARD
  PIX
  OTHER

  @@map("payment_method")
}

enum TicketStatus {
  ISSUED
  USED
  REFUNDED

  @@map("ticket_status")
}

enum DiscountType {
  PERCENT
  AMOUNT
  BOGO

  @@map("discount_type")
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE

  @@map("subscription_plan")
}

// ===== MULTI-TENANCY CORE =====

model Company {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(200)
  cnpj      String   @unique @db.VarChar(18) // Brazilian company identifier
  tradeName String?  @map("trade_name") @db.VarChar(200)
  address   String?  @db.VarChar(500)
  city      String?  @db.VarChar(100)
  state     String?  @db.VarChar(2)
  zipCode   String?  @map("zip_code") @db.VarChar(10)
  phone     String?  @db.VarChar(20)
  email     String?  @db.VarChar(200)
  website   String?  @db.VarChar(200)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  customers         Customer[]
  employees         Employee[]
  movies            Movie[]
  rooms             Room[]
  sessions          Session[]
  seatMaps          SeatMap[]
  inventoryItems    InventoryItem[]
  inventoryAdjustments InventoryAdjustment[]
  sales             Sale[]
  saleItems         SaleItem[]
  discountCodes     DiscountCode[]
  roomTypePrices    RoomTypePrice[]
  auditLogs         AuditLog[]
  timeEntries       TimeEntry[]
  tickets           Ticket[]
  payments          Payment[]
  subscription      CompanySubscription?

  @@index([isActive])
  @@index([cnpj])
  @@map("company")
}

model CompanySubscription {
  companyId    String           @id @map("company_id") @db.Uuid
  plan         SubscriptionPlan
  startDate    DateTime         @map("start_date") @db.Date
  endDate      DateTime?        @map("end_date") @db.Date
  maxEmployees Int              @map("max_employees")
  maxRooms     Int              @map("max_rooms")
  isActive     Boolean          @default(true) @map("is_active")
  monthlyFee   Decimal          @map("monthly_fee") @db.Decimal(10, 2)
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@map("company_subscription")
}

model SystemAdmin {
  id           String    @id @default(uuid()) @db.Uuid
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(200)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login") @db.Timestamp(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("system_admin")
}

// ===== PEOPLE (COMPANY-SCOPED) =====

model Person {
  cpf       String @id @db.VarChar(11)
  fullName  String @map("full_name") @db.VarChar(200)
  email     String @db.VarChar(200)
  phone     String @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  customers Customer[]
  employees Employee[]

  @@index([email])
  @@map("person")
}

model Customer {
  cpf          String    @db.VarChar(11)
  companyId    String    @map("company_id") @db.Uuid
  birthDate    DateTime? @map("birth_date") @db.Date
  loyaltyPoints Int      @default(0) @map("loyalty_points")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  person  Person  @relation(fields: [cpf], references: [cpf])
  sales   Sale[]

  @@id([cpf, companyId])
  @@index([companyId])
  @@map("customer")
}

model Employee {
  cpf          String       @db.VarChar(11)
  companyId    String       @map("company_id") @db.Uuid
  employeeId   String       @map("employee_id") @db.VarChar(20)
  role         EmployeeRole
  hireDate     DateTime     @map("hire_date") @db.Date
  isActive     Boolean      @default(true) @map("is_active")
  passwordHash String?      @map("password_hash") @db.VarChar(255)
  permissions  Json?
  lastLogin    DateTime?    @map("last_login") @db.Timestamp(6)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company     Company               @relation(fields: [companyId], references: [id])
  person      Person                @relation(fields: [cpf], references: [cpf])
  sales       Sale[]                @relation("CashierSales")
  timeEntries TimeEntry[]
  auditLogs   AuditLog[]
  adjustments InventoryAdjustment[]

  @@id([cpf, companyId])
  @@unique([companyId, employeeId]) // employeeId unique within company
  @@index([companyId])
  @@index([companyId, isActive])
  @@index([companyId, role])
  @@map("employee")
}

model TimeEntry {
  id          String        @id @default(uuid()) @db.Uuid
  companyId   String        @map("company_id") @db.Uuid
  employeeCpf String        @map("employee_cpf") @db.VarChar(11)
  entryType   TimeEntryType @map("entry_type")
  timestamp   DateTime      @default(now()) @db.Timestamp(6)
  notes       String?       @db.VarChar(500)
  ipAddress   String?       @map("ip_address") @db.VarChar(45)
  location    String?       @db.VarChar(100)

  // Relations
  company  Company  @relation(fields: [companyId], references: [id])
  employee Employee @relation(fields: [employeeCpf, companyId], references: [cpf, companyId])

  @@index([companyId])
  @@index([companyId, employeeCpf])
  @@index([companyId, timestamp])
  @@index([companyId, entryType])
  @@map("time_entry")
}

// ===== MOVIES & SESSIONS (COMPANY-SCOPED) =====

model Movie {
  id          String    @id @default(uuid()) @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  title       String    @db.VarChar(200)
  durationMin Int       @map("duration_min")
  genre       String?   @db.VarChar(80)
  description String?   @db.Text
  rating      String?   @db.VarChar(10)
  posterUrl   String?   @map("poster_url") @db.VarChar(500)
  releaseDate DateTime? @map("release_date") @db.Date
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company  Company   @relation(fields: [companyId], references: [id])
  sessions Session[]

  @@index([companyId])
  @@index([companyId, isActive])
  @@map("movie")
}

model SeatMap {
  id        String @id @default(uuid()) @db.Uuid
  companyId String @map("company_id") @db.Uuid
  name      String @db.VarChar(100)
  rows      Int
  cols      Int
  version   Int    @default(1)
  layout    Json? // Flexible seat layout configuration

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  rooms   Room[]
  seats   Seat[]

  @@index([companyId])
  @@map("seat_map")
}

model Seat {
  id           String  @db.VarChar(10)
  seatMapId    String  @map("seat_map_id") @db.Uuid
  rowLabel     String  @map("row_label") @db.VarChar(5)
  number       Int
  isAccessible Boolean @default(false) @map("is_accessible")
  isActive     Boolean @default(true) @map("is_active")

  // Relations
  seatMap SeatMap  @relation(fields: [seatMapId], references: [id])
  tickets Ticket[]

  @@id([seatMapId, id])
  @@index([seatMapId, isActive])
  @@map("seat")
}

model Room {
  id        String   @id @default(uuid()) @db.Uuid
  companyId String   @map("company_id") @db.Uuid
  name      String   @db.VarChar(80)
  capacity  Int
  roomType  RoomType @map("room_type")
  seatMapId String?  @map("seat_map_id") @db.Uuid
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company  Company   @relation(fields: [companyId], references: [id])
  seatMap  SeatMap?  @relation(fields: [seatMapId], references: [id])
  sessions Session[]

  @@unique([companyId, name]) // Room name unique within company
  @@index([companyId])
  @@index([companyId, isActive])
  @@map("room")
}

model RoomTypePrice {
  companyId String   @map("company_id") @db.Uuid
  roomType  RoomType @map("room_type")
  price     Decimal  @db.Decimal(10, 2)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@id([companyId, roomType])
  @@map("room_type_price")
}

model Session {
  id        String        @id @default(uuid()) @db.Uuid
  companyId String        @map("company_id") @db.Uuid
  movieId   String        @map("movie_id") @db.Uuid
  roomId    String        @map("room_id") @db.Uuid
  startTime DateTime      @map("start_time") @db.Timestamp(6)
  endTime   DateTime      @map("end_time") @db.Timestamp(6)
  basePrice Decimal?      @map("base_price") @db.Decimal(10, 2) // Can override room type price
  status    SessionStatus @default(SCHEDULED)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company Company  @relation(fields: [companyId], references: [id])
  movie   Movie    @relation(fields: [movieId], references: [id])
  room    Room     @relation(fields: [roomId], references: [id])
  tickets Ticket[]

  @@index([companyId])
  @@index([companyId, movieId])
  @@index([companyId, roomId])
  @@index([companyId, startTime])
  @@map("session")
}

// ===== TICKETS (COMPANY-SCOPED) =====

model Ticket {
  id        String       @id @default(uuid()) @db.Uuid
  companyId String       @map("company_id") @db.Uuid
  sessionId String       @map("session_id") @db.Uuid
  seatMapId String       @map("seat_map_id") @db.Uuid
  seatId    String       @map("seat_id") @db.VarChar(10)
  saleId    String?      @map("sale_id") @db.Uuid
  price     Decimal      @db.Decimal(10, 2)
  status    TicketStatus @default(ISSUED)
  issuedAt  DateTime     @default(now()) @map("issued_at") @db.Timestamp(6)
  usedAt    DateTime?    @map("used_at") @db.Timestamp(6)
  qrCode    String       @unique @map("qr_code") @db.VarChar(100)

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])
  seat    Seat    @relation(fields: [seatMapId, seatId], references: [seatMapId, id])
  sale    Sale?   @relation(fields: [saleId], references: [id])

  @@unique([companyId, sessionId, seatMapId, seatId]) // One ticket per seat per session
  @@index([companyId])
  @@index([companyId, sessionId])
  @@index([companyId, status])
  @@map("ticket")
}

// ===== INVENTORY (COMPANY-SCOPED) =====

model InventoryItem {
  sku          String  @db.VarChar(50)
  companyId    String  @map("company_id") @db.Uuid
  name         String  @db.VarChar(200)
  unitPrice    Decimal @map("unit_price") @db.Decimal(10, 2)
  qtyOnHand    Int     @map("qty_on_hand")
  reorderLevel Int     @map("reorder_level")
  barcode      String? @db.VarChar(50)
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company     Company               @relation(fields: [companyId], references: [id])
  food        Food?
  collectable Collectable?
  saleItems   SaleItem[]
  adjustments InventoryAdjustment[]

  @@id([companyId, sku])
  @@index([companyId])
  @@index([companyId, isActive])
  @@index([companyId, barcode])
  @@map("inventory_item")
}

model Food {
  companyId   String    @map("company_id") @db.Uuid
  sku         String    @db.VarChar(50)
  expiryDate  DateTime? @map("expiry_date") @db.Date
  isCombo     Boolean   @default(false) @map("is_combo")
  category    String?   @db.VarChar(100)

  // Relations
  item InventoryItem @relation(fields: [companyId, sku], references: [companyId, sku])

  @@id([companyId, sku])
  @@map("food")
}

model Collectable {
  companyId String @map("company_id") @db.Uuid
  sku       String @db.VarChar(50)
  category  String @db.VarChar(100)
  brand     String @db.VarChar(100)

  // Relations
  item InventoryItem @relation(fields: [companyId, sku], references: [companyId, sku])

  @@id([companyId, sku])
  @@map("collectable")
}

model InventoryAdjustment {
  id          String   @id @default(uuid()) @db.Uuid
  companyId   String   @map("company_id") @db.Uuid
  sku         String   @db.VarChar(50)
  delta       Int // Quantity change (+/-)
  reason      String   @db.VarChar(200)
  actorCpf    String   @map("actor_cpf") @db.VarChar(11)
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  notes       String?  @db.VarChar(500)

  // Relations
  company Company       @relation(fields: [companyId], references: [id])
  item    InventoryItem @relation(fields: [companyId, sku], references: [companyId, sku])
  actor   Employee      @relation(fields: [actorCpf, companyId], references: [cpf, companyId])

  @@index([companyId])
  @@index([companyId, sku])
  @@index([companyId, timestamp])
  @@map("inventory_adjustment")
}

// ===== DISCOUNTS (COMPANY-SCOPED) =====

model DiscountCode {
  code         String       @db.VarChar(50)
  companyId    String       @map("company_id") @db.Uuid
  description  String?      @db.VarChar(200)
  type         DiscountType
  value        Decimal      @db.Decimal(10, 2)
  validFrom    DateTime     @map("valid_from") @db.Timestamp(6)
  validTo      DateTime     @map("valid_to") @db.Timestamp(6)
  cpfRangeStart String?     @map("cpf_range_start") @db.VarChar(11)
  cpfRangeEnd  String?      @map("cpf_range_end") @db.VarChar(11)
  maxUses      Int?         @map("max_uses")
  currentUses  Int          @default(0) @map("current_uses")
  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company       Company        @relation(fields: [companyId], references: [id])
  saleDiscounts SaleDiscount[]

  @@id([companyId, code])
  @@index([companyId])
  @@index([companyId, isActive])
  @@index([companyId, validFrom, validTo])
  @@map("discount_code")
}

// ===== SALES (COMPANY-SCOPED) =====

model Sale {
  id            String     @id @default(uuid()) @db.Uuid
  companyId     String     @map("company_id") @db.Uuid
  cashierCpf    String     @map("cashier_cpf") @db.VarChar(11)
  buyerCpf      String?    @map("buyer_cpf") @db.VarChar(11)
  subTotal      Decimal    @default(0) @map("sub_total") @db.Decimal(10, 2)
  discountTotal Decimal    @default(0) @map("discount_total") @db.Decimal(10, 2)
  taxTotal      Decimal    @default(0) @map("tax_total") @db.Decimal(10, 2)
  grandTotal    Decimal    @default(0) @map("grand_total") @db.Decimal(10, 2)
  status        SaleStatus @default(OPEN)
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company   Company        @relation(fields: [companyId], references: [id])
  cashier   Employee       @relation("CashierSales", fields: [cashierCpf, companyId], references: [cpf, companyId])
  buyer     Customer?      @relation(fields: [buyerCpf, companyId], references: [cpf, companyId])
  items     SaleItem[]
  discounts SaleDiscount[]
  payments  Payment[]
  tickets   Ticket[]

  @@index([companyId])
  @@index([companyId, cashierCpf])
  @@index([companyId, buyerCpf])
  @@index([companyId, createdAt])
  @@index([companyId, status])
  @@map("sale")
}

model SaleItem {
  id          String  @id @default(uuid()) @db.Uuid
  saleId      String  @map("sale_id") @db.Uuid
  companyId   String  @map("company_id") @db.Uuid
  description String  @db.VarChar(200)
  sku         String? @db.VarChar(50) // For inventory items
  sessionId   String? @map("session_id") @db.Uuid // For tickets
  seatId      String? @map("seat_id") @db.VarChar(10) // For tickets
  quantity    Int
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  lineTotal   Decimal @map("line_total") @db.Decimal(10, 2)

  // Relations
  sale Sale          @relation(fields: [saleId], references: [id])
  company Company   @relation(fields: [companyId], references: [id])
  item InventoryItem? @relation(fields: [companyId, sku], references: [companyId, sku])

  @@index([saleId])
  @@index([companyId])
  @@map("sale_item")
}

model SaleDiscount {
  saleId    String   @map("sale_id") @db.Uuid
  companyId String   @map("company_id") @db.Uuid
  code      String   @db.VarChar(50)
  appliedAt DateTime @default(now()) @map("applied_at") @db.Timestamp(6)
  discountAmount Decimal @map("discount_amount") @db.Decimal(10, 2)

  // Relations
  sale         Sale         @relation(fields: [saleId], references: [id])
  discountCode DiscountCode @relation(fields: [companyId, code], references: [companyId, code])

  @@id([saleId, companyId, code])
  @@map("sale_discount")
}

model Payment {
  id        String        @id @default(uuid()) @db.Uuid
  companyId String        @map("company_id") @db.Uuid
  saleId    String        @map("sale_id") @db.Uuid
  method    PaymentMethod
  amount    Decimal       @db.Decimal(10, 2)
  authCode  String?       @map("auth_code") @db.VarChar(100)
  paidAt    DateTime      @default(now()) @map("paid_at") @db.Timestamp(6)

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  sale    Sale    @relation(fields: [saleId], references: [id])

  @@index([companyId])
  @@index([companyId, saleId])
  @@map("payment")
}

// ===== AUDIT (COMPANY-SCOPED) =====

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  companyId    String   @map("company_id") @db.Uuid
  actorCpf     String   @map("actor_cpf") @db.VarChar(11)
  action       String   @db.VarChar(100)
  targetType   String   @map("target_type") @db.VarChar(50)
  targetId     String?  @map("target_id") @db.VarChar(100)
  timestamp    DateTime @default(now()) @db.Timestamp(6)
  metadataJson Json?    @map("metadata_json")
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.VarChar(500)

  // Relations
  company Company  @relation(fields: [companyId], references: [id])
  actor   Employee @relation(fields: [actorCpf, companyId], references: [cpf, companyId])

  @@index([companyId])
  @@index([companyId, actorCpf])
  @@index([companyId, timestamp])
  @@index([companyId, action])
  @@index([companyId, targetType])
  @@map("audit_log")
}